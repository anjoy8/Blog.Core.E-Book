(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{214:function(e,t,n){"use strict";n.r(t);var r=n(6),s=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"z-主要知识点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#z-主要知识点"}},[e._v("#")]),e._v(" Z  主要知识点")]),e._v(" "),t("h2",{attrs:{id:"aop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aop"}},[e._v("#")]),e._v(" AOP")]),e._v(" "),t("p",[e._v("本项目多处采用面向切面编程思想——AOP，除了广义上的过滤器和中间件以外，主要通过动态代理的形式来实现AOP编程思想，主要的案例共有四个，分别是："),t("br"),e._v("\n1、服务日志AOP；"),t("br"),e._v("\n2、服务InMemory缓存AOP；"),t("br"),e._v("\n3、服务Redis缓存AOP；"),t("br"),e._v("\n4、服务事务AOP；")]),e._v(" "),t("p",[e._v("具体的代码可以在 "),t("code",[e._v("Blog.Core\\Blog.Core\\AOP")]),e._v(" 文件夹下查看。")]),e._v(" "),t("p",[e._v("与此同时，多个AOP也设置了阀门来控制是否开启，具体的可以查看 "),t("code",[e._v("appsettings.json")]),e._v(" 中的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  "AppSettings": {\n    "RedisCachingAOP": {\n      "Enabled": false,\n      "ConnectionString": "127.0.0.1:6319"\n    },\n    "MemoryCachingAOP": {\n      "Enabled": true\n    },\n    "LogAOP": {\n      "Enabled": false\n    },\n    "TranAOP": {\n      "Enabled": false\n    },\n    "SqlAOP": {\n      "Enabled": false\n    }\n  },\n\n')])])]),t("h2",{attrs:{id:"appsettings"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#appsettings"}},[e._v("#")]),e._v(" Appsettings")]),e._v(" "),t("p",[e._v("整个系统通过一个封装的操作类 "),t("code",[e._v("Appsettings.cs")]),e._v(" 来控制配置文件 "),t("code",[e._v("appsettings.json")]),e._v(" 文件，"),t("br"),e._v("\n操作类地址在："),t("code",[e._v("\\Blog.Core.Common\\Helper")]),e._v(" 文件夹下。"),t("br"),e._v("\n具体的使用方法是：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('Appsettings.app(new string[] { "AppSettings", "RedisCachingAOP", "Enabled" })\n\n// 里边的参数，按照 appsettings.json 中设置的层级顺序来写，可以获取到指定的任意内容。\n\n')])])]),t("h2",{attrs:{id:"aspnetcoreratelimit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aspnetcoreratelimit"}},[e._v("#")]),e._v(" AspNetCoreRateLimit")]),e._v(" "),t("p",[e._v("系统使用 "),t("code",[e._v("AspNetCoreRateLimit")]),e._v(" 组件来实现ip限流：\n1、添加 "),t("code",[e._v("nuget")]),e._v(" 包：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('<PackageReference Include="AspNetCoreRateLimit" Version="3.0.5" />\n')])])]),t("p",[e._v("2、注入服务 "),t("code",[e._v("IpPolicyRateLimitSetup.cs")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("services.AddIpPolicyRateLimitSetup(Configuration);\n")])])]),t("p",[e._v("3、配置中间件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" // Ip限流,尽量放管道外层\n app.UseIpRateLimiting();\n")])])]),t("p",[e._v("4、配置数据")]),e._v(" "),t("p",[e._v("具体的内容，自行百度即可")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  "IpRateLimiting": {\n    "EnableEndpointRateLimiting": true,\n    "StackBlockedRequests": false,\n    "RealIpHeader": "X-Real-IP",\n    "ClientIdHeader": "X-ClientId",\n    "HttpStatusCode": 429,//返回状态码\n    "GeneralRules": [//规则,结尾一定要带*\n      {\n        "Endpoint": "*",\n        "Period": "1m",\n        "Limit": 120\n      },\n      {\n        "Endpoint": "*:/api/blog*",\n        "Period": "1m",\n        "Limit": 30\n      }\n    ]\n\n  }\n')])])]),t("h2",{attrs:{id:"async-await"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#async-await"}},[e._v("#")]),e._v(" Async-Await")]),e._v(" "),t("p",[e._v("整个系统采用 async/await 异步编程，符合主流的开发模式，"),t("br"),e._v("\n特别是对多线程开发很友好。")]),e._v(" "),t("h2",{attrs:{id:"authorization-ids4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#authorization-ids4"}},[e._v("#")]),e._v(" Authorization-Ids4")]),e._v(" "),t("p",[e._v("本系统 v2.0 版本（目前的系统已经集成 "),t("code",[e._v("ids4")]),e._v(" 和 "),t("code",[e._v("jwt")]),e._v("，并且可以自由切换），已经支持了统一授权认证，和 "),t("code",[e._v("blog")]),e._v(" 项目、"),t("code",[e._v("Admin")]),e._v(" 项目、"),t("code",[e._v("DDD")]),e._v(" 项目等一起，使用一个统一的认证中心。")]),e._v(" "),t("p",[e._v("具体的代码参考："),t("code",[e._v(".\\Blog.Core\\Extensions")]),e._v(" 文件夹下的 "),t("code",[e._v("Authorization_Ids4Setup.cs")]),e._v(" ，注意需要引用指定的 "),t("code",[e._v("nuget")]),e._v(" 包，核心代码如下：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    //【认证】\n  services.AddAuthentication(o =>\n  {\n      o.DefaultScheme = JwtBearerDefaults.AuthenticationScheme;\n      o.DefaultChallengeScheme = nameof(ApiResponseHandler);\n      o.DefaultForbidScheme = nameof(ApiResponseHandler);\n  })\n  // 2.添加Identityserver4认证\n  .AddIdentityServerAuthentication(options =>\n  {\n      options.Authority = Appsettings.app(new string[] { "Startup", "IdentityServer4", "AuthorizationUrl" });\n      options.RequireHttpsMetadata = false;\n      options.ApiName = Appsettings.app(new string[] { "Startup", "IdentityServer4", "ApiName" });\n      options.SupportedTokens = IdentityServer4.AccessTokenValidation.SupportedTokens.Jwt;\n      options.ApiSecret = "api_secret";\n\n  })\n\n\n')])])]),t("h3",{attrs:{id:"如何在swagger中配置ids4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#如何在swagger中配置ids4"}},[e._v("#")]),e._v(" 如何在Swagger中配置Ids4？")]),e._v(" "),t("p",[e._v("很简单，直接在 "),t("code",[e._v("SwaggerSetup.cs")]),e._v(" 中直接接入 "),t("code",[e._v("oauth、Implicit")]),e._v(" 即可：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' //接入identityserver4\n c.AddSecurityDefinition("oauth2", new OpenApiSecurityScheme\n {\n     Type = SecuritySchemeType.OAuth2,\n     Flows = new OpenApiOAuthFlows\n     {\n         Implicit = new OpenApiOAuthFlow\n         {\n             AuthorizationUrl = new Uri($"{Appsettings.app(new string[] { "Startup", "IdentityServer4", "AuthorizationUrl" })}/connect/authorize"),\n             Scopes = new Dictionary<string, string> {\n             {\n                 "blog.core.api","ApiResource id"\n             }\n         }\n         }\n     }\n });\n\n')])])]),t("p",[e._v("然后在 "),t("code",[e._v("IdentityServer4")]),e._v("  项目中，做指定的修改，配置 "),t("code",[e._v("9291")]),e._v(" 的回调地址：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' new Client {\n     ClientId = "blogadminjs",\n     ClientName = "Blog.Admin JavaScript Client",\n     AllowedGrantTypes = GrantTypes.Implicit,\n     AllowAccessTokensViaBrowser = true,\n\n     RedirectUris =\n     {\n         "http://vueadmin.neters.club/callback",\n         // 这里要配置回调地址\n         "http://localhost:9291/oauth2-redirect.html" \n     },\n     PostLogoutRedirectUris = { "http://vueadmin.neters.club" },\n     AllowedCorsOrigins =     { "http://vueadmin.neters.club" },\n\n     AllowedScopes = {\n         IdentityServerConstants.StandardScopes.OpenId,\n         IdentityServerConstants.StandardScopes.Profile,\n         "roles",\n         "blog.core.api"\n     }\n },\n\n')])])]),t("p",[e._v("然后再 "),t("code",[e._v("Swagger")]),e._v(" 中，配置登录授权：")]),e._v(" "),t("img",{attrs:{src:"http://apk.neters.club/images/20200507213830.png",alt:"swagger",width:"600"}}),e._v(" "),t("h2",{attrs:{id:"authorization-jwt"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#authorization-jwt"}},[e._v("#")]),e._v(" Authorization-JWT")]),e._v(" "),t("p",[e._v("如果你不想使用 "),t("code",[e._v("IdentityServer4")]),e._v(" 的话，也可以使用 "),t("code",[e._v("JWT")]),e._v(" 认证，同样是是"),t("code",[e._v("Blog.Core\\Blog.Core\\Extensions")]),e._v(" 文件夹下的 "),t("code",[e._v("AuthorizationSetup.cs")]),e._v(" 中有关认证的部分：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' 1.添加JwtBearer认证服务\n.AddJwtBearer(o =>\n{\n    o.TokenValidationParameters = tokenValidationParameters;\n    o.Events = new JwtBearerEvents\n    {\n        OnAuthenticationFailed = context =>\n        {\n            // 如果过期，则把<是否过期>添加到，返回头信息中\n            if (context.Exception.GetType() == typeof(SecurityTokenExpiredException))\n            {\n                context.Response.Headers.Add("Token-Expired", "true");\n            }\n            return Task.CompletedTask;\n        }\n    };\n})\n\n')])])]),t("h2",{attrs:{id:"automapper"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#automapper"}},[e._v("#")]),e._v(" AutoMapper")]),e._v(" "),t("p",[e._v("使用 "),t("code",[e._v("AutoMapper")]),e._v(" 组件来实现 "),t("code",[e._v("Dto")]),e._v(" 模型的传输转换，具体的用法，可以查看："),t("br"),e._v(" "),t("code",[e._v("Blog.Core\\Blog.Core\\Extensions")]),e._v(" 文件夹下的 "),t("code",[e._v("AutoMapperSetup.cs")]),e._v(" 扩展类，"),t("br"),e._v("\n通过引用 "),t("code",[e._v("AutoMapper")]),e._v(" 和 "),t("code",[e._v("AutoMapper.Extensions.Microsoft.DependencyInjection")]),e._v(" 两个 "),t("code",[e._v("nuget")]),e._v(" 包，并设置指定的 "),t("code",[e._v("profile")]),e._v(" 文件，来实现模型转换控制。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("// 比如如何定义：\n public class CustomProfile : Profile\n {\n     /// <summary>\n     /// 配置构造函数，用来创建关系映射\n     /// </summary>\n     public CustomProfile()\n     {\n         CreateMap<BlogArticle, BlogViewModels>();\n         CreateMap<BlogViewModels, BlogArticle>();\n     }\n }\n\n\n// 比如如何使用\nmodels = _mapper.Map<BlogViewModels>(blogArticle);\n\n")])])]),t("p",[e._v("具体的查看项目中代码即可。")]),e._v(" "),t("h2",{attrs:{id:"cors"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cors"}},[e._v("#")]),e._v(" CORS")]),e._v(" "),t("p",[e._v("在线项目使用的是 "),t("code",[e._v("nginx")]),e._v(" 跨域代理，但是同时也是支持 "),t("code",[e._v("CORS")]),e._v(" 代理："),t("br"),e._v("\n1、注入服务 "),t("code",[e._v("services.AddCorsSetup();")]),e._v(" 具体代码 "),t("code",[e._v("Blog.Core\\Blog.Core\\Extensions")]),e._v(" 文件夹下的 "),t("code",[e._v("CorsSetup.cs")]),e._v(" 扩展类；"),t("br"),e._v("\n2、配置中间件 "),t("code",[e._v('app.UseCors("LimitRequests");')]),e._v(" ,要注意中间件顺序；"),t("br"),e._v("\n3、配置自己项目的前端端口，通过在 "),t("code",[e._v("appsettings.json")]),e._v(" 文件中配置自己的前端项目 "),t("code",[e._v("ip:端口")]),e._v(" ，来实现跨域：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  "Startup": {\n    "Cors": {\n      "IPs": "http://127.0.0.1:2364,http://localhost:2364,http://localhost:8080,http://localhost:8021,http://localhost:1818"\n    }\n  },\n\n')])])]),t("h2",{attrs:{id:"di-autofac"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#di-autofac"}},[e._v("#")]),e._v(" DI-AutoFac")]),e._v(" "),t("p",[e._v("项目使用了依赖注入，除了原生的依赖注入以外，更多的使用的是第三方组件 "),t("code",[e._v("Autofac")]),e._v(" ："),t("br"),e._v("\n1、引用依赖包：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('    <PackageReference Include="Autofac.Extensions.DependencyInjection" Version="5.0.1" />\n    <PackageReference Include="Autofac.Extras.DynamicProxy" Version="4.5.0" />\n\n')])])]),t("p",[e._v("主要是第一个 "),t("code",[e._v("nuget")]),e._v(" 包，下边的是为了实现动态代理 "),t("code",[e._v("AOP")]),e._v(" 操作；")]),e._v(" "),t("p",[e._v("2、项目之间采用引用解耦的方式，通过反射来注入服务层和仓储层的程序集 "),t("code",[e._v("dll")]),e._v(" 来实现批量注入，更方便，以后每次新增和修改 "),t("code",[e._v("Service")]),e._v(" 层和 "),t("code",[e._v("Repository")]),e._v(" 层，只需要 "),t("code",[e._v("F6")]),e._v(" 编译一下即可，具体代码查看 "),t("code",[e._v("Startup.cs")]),e._v("：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('\n\n        // 注意在CreateDefaultBuilder中，添加Autofac服务工厂\n        public void ConfigureContainer(ContainerBuilder builder)\n        {\n            var basePath = Microsoft.DotNet.PlatformAbstractions.ApplicationEnvironment.ApplicationBasePath;\n            //builder.RegisterType<AdvertisementServices>().As<IAdvertisementServices>();\n\n\n            #region 带有接口层的服务注入\n\n\n            var servicesDllFile = Path.Combine(basePath, "Blog.Core.Services.dll");\n            var repositoryDllFile = Path.Combine(basePath, "Blog.Core.Repository.dll");\n\n            if (!(File.Exists(servicesDllFile) && File.Exists(repositoryDllFile)))\n            {\n                throw new Exception("Repository.dll和service.dll 丢失，因为项目解耦了，所以需要先F6编译，再F5运行，请检查 bin 文件夹，并拷贝。");\n            }\n\n\n\n            // AOP 开关，如果想要打开指定的功能，只需要在 appsettigns.json 对应对应 true 就行。\n            var cacheType = new List<Type>();\n            if (Appsettings.app(new string[] { "AppSettings", "RedisCachingAOP", "Enabled" }).ObjToBool())\n            {\n                builder.RegisterType<BlogRedisCacheAOP>();\n                cacheType.Add(typeof(BlogRedisCacheAOP));\n            }\n            if (Appsettings.app(new string[] { "AppSettings", "MemoryCachingAOP", "Enabled" }).ObjToBool())\n            {\n                builder.RegisterType<BlogCacheAOP>();\n                cacheType.Add(typeof(BlogCacheAOP));\n            }\n            if (Appsettings.app(new string[] { "AppSettings", "TranAOP", "Enabled" }).ObjToBool())\n            {\n                builder.RegisterType<BlogTranAOP>();\n                cacheType.Add(typeof(BlogTranAOP));\n            }\n            if (Appsettings.app(new string[] { "AppSettings", "LogAOP", "Enabled" }).ObjToBool())\n            {\n                builder.RegisterType<BlogLogAOP>();\n                cacheType.Add(typeof(BlogLogAOP));\n            }\n\n            // 获取 Service.dll 程序集服务，并注册\n            var assemblysServices = Assembly.LoadFrom(servicesDllFile);\n            builder.RegisterAssemblyTypes(assemblysServices)\n                      .AsImplementedInterfaces()\n                      .InstancePerDependency()\n                      .EnableInterfaceInterceptors()//引用Autofac.Extras.DynamicProxy;\n                      .InterceptedBy(cacheType.ToArray());//允许将拦截器服务的列表分配给注册。\n\n            // 获取 Repository.dll 程序集服务，并注册\n            var assemblysRepository = Assembly.LoadFrom(repositoryDllFile);\n            builder.RegisterAssemblyTypes(assemblysRepository)\n                   .AsImplementedInterfaces()\n                   .InstancePerDependency();\n\n            #endregion\n\n            #region 没有接口层的服务层注入\n\n            //因为没有接口层，所以不能实现解耦，只能用 Load 方法。\n            //注意如果使用没有接口的服务，并想对其使用 AOP 拦截，就必须设置为虚方法\n            //var assemblysServicesNoInterfaces = Assembly.Load("Blog.Core.Services");\n            //builder.RegisterAssemblyTypes(assemblysServicesNoInterfaces);\n\n            #endregion\n\n            #region 没有接口的单独类 class 注入\n\n            //只能注入该类中的虚方法\n            builder.RegisterAssemblyTypes(Assembly.GetAssembly(typeof(Love)))\n                .EnableClassInterceptors()\n                .InterceptedBy(cacheType.ToArray());\n\n            #endregion\n\n\n            // 这里和注入没关系，只是获取注册列表，请忽略\n            tsDIAutofac.AddRange(assemblysServices.GetTypes().ToList());\n            tsDIAutofac.AddRange(assemblysRepository.GetTypes().ToList());\n        }\n\n')])])]),t("p",[e._v("3、然后 "),t("code",[e._v("Program.cs")]),e._v(" 中也要加一句话："),t("code",[e._v(".UseServiceProviderFactory(new AutofacServiceProviderFactory()) //<--NOTE THIS")])]),e._v(" "),t("h2",{attrs:{id:"di-netcore"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#di-netcore"}},[e._v("#")]),e._v(" DI-NetCore")]),e._v(" "),t("p",[e._v("除了主要的 "),t("code",[e._v("Autofac")]),e._v(" 依赖注入以外，也减少的使用了原生的依赖注入方式，很简单，比如这样的：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("\n            services.AddSingleton<IHttpContextAccessor, HttpContextAccessor>();\n            // 注入权限处理器\n            services.AddScoped<IAuthorizationHandler, PermissionHandler>();\n            services.AddSingleton(permissionRequirement);\n")])])]),t("h2",{attrs:{id:"filter"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[e._v("#")]),e._v(" Filter")]),e._v(" "),t("p",[e._v("项目中一共有四个过滤器")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("1、GlobalAuthorizeFilter.cs —— 全局授权配置，添加后，就可以不用在每一个控制器上添加 [Authorize] 特性，但是3.1版本好像有些问题，【暂时放弃使用】；\n2、GlobalExceptionFilter.cs —— 全局异常处理，实现 actionContext 级别的异常日志收集；\n3、GlobalRoutePrefixFilter.cs —— 全局路由前缀公约，统计在路由上加上前缀；\n4、UseServiceDIAttribute.cs —— 测试注入，【暂时无用】；\n")])])]),t("p",[e._v("文件地址在 "),t("code",[e._v(".\\Blog.Core\\Filter")]),e._v(" 文件夹下，其中核心的是 "),t("code",[e._v("2")]),e._v(" 个，重点使用的是 "),t("code",[e._v("1")]),e._v(" 个 —— 全局异常错误日志 "),t("code",[e._v("GlobalExceptionsFilter")]),e._v(":\n通过注册在 "),t("code",[e._v("MVC")]),e._v(" 服务 "),t("code",[e._v("services.AddControllers()")]),e._v(" 中，实现全局异常过滤：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" services.AddControllers(o =>\n {\n     // 全局异常过滤\n     o.Filters.Add(typeof(GlobalExceptionsFilter));\n     // 全局路由权限公约\n     //o.Conventions.Insert(0, new GlobalRouteAuthorizeConvention());\n     // 全局路由前缀，统一修改路由\n     o.Conventions.Insert(0, new GlobalRoutePrefixFilter(new RouteAttribute(RoutePrefix.Name)));\n })\n")])])]),t("h2",{attrs:{id:"framework"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#framework"}},[e._v("#")]),e._v(" Framework")]),e._v(" "),t("p",[e._v("项目采用 "),t("code",[e._v("服务+仓储+接口")]),e._v(" 的多层结构，使用依赖注入，并且通过解耦项目，较完整的实现了 "),t("code",[e._v("DIP")]),e._v(" 原则："),t("br"),e._v("\n高层模块不应该依赖于底层模块，二者都应该依赖于抽象。"),t("br"),e._v("\n抽象不应该依赖于细节，细节应该依赖于抽象。")]),e._v(" "),t("p",[e._v("同时项目也封装了:"),t("br"),e._v(" "),t("code",[e._v("CodeFirst")]),e._v(" 初始化数据库以及数据；"),t("br"),e._v(" "),t("code",[e._v("DbFirst")]),e._v(" 根据数据库（支持多库），生成多层代码，算是简单代码生成器；"),t("br"),e._v("\n其他功能，"),t("a",{attrs:{href:"http://apk.neters.club/.doc/guide/#%E5%8A%9F%E8%83%BD%E4%B8%8E%E8%BF%9B%E5%BA%A6",target:"_blank",rel:"noopener noreferrer"}},[e._v("核心功能与进度"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"log"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#log"}},[e._v("#")]),e._v(" Log")]),e._v(" "),t("p",[e._v("通过集成 "),t("code",[e._v("Log4Net")]),e._v(" 组件，完美配合 "),t("code",[e._v("NetCore")]),e._v(" 官方的 "),t("code",[e._v("ILogger<T>")]),e._v(" 接口，实现对日志的管控，引用 "),t("code",[e._v("nuget")]),e._v(" 包 "),t("code",[e._v("Microsoft.Extensions.Logging.Log4Net.AspNetCore")]),e._v(":\nProgram.cs")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('  webBuilder\n  .UseStartup<Startup>()\n  .ConfigureLogging((hostingContext, builder) =>\n  {\n      //该方法需要引入Microsoft.Extensions.Logging名称空间\n      builder.AddFilter("System", LogLevel.Error); //过滤掉系统默认的一些日志\n      builder.AddFilter("Microsoft", LogLevel.Error);//过滤掉系统默认的一些日志\n\n      //添加Log4Net\n      //var path = Directory.GetCurrentDirectory() + "\\\\log4net.config"; \n      //不带参数：表示log4net.config的配置文件就在应用程序根目录下，也可以指定配置文件的路径\n      //需要添加nuget包：Microsoft.Extensions.Logging.Log4Net.AspNetCore\n      builder.AddLog4Net();\n  });\n\n')])])]),t("p",[e._v("然后直接在需要的地方注入使用，比如在控制器中\n"),t("code",[e._v("public UserController(ILogger<UserController> logger)")])]),e._v(" "),t("p",[e._v("然后就可以使用了。")]),e._v(" "),t("blockquote",[t("p",[e._v("注意：日志 其实是分为两部分的："),t("br"),e._v("\nnetcore输出(控制台、输出窗口等) 和 "),t("code",[e._v("ILogger")]),e._v(" 持久化"),t("br"),e._v("\n两者对应配置也不一样，就比如上边的过滤，是针对日志持久化的，如果想要对控制台进行控制，需要配置 "),t("code",[e._v("appsettings.json")]),e._v(" 中的 "),t("code",[e._v("Logging")]),e._v(" 节点")])]),e._v(" "),t("h2",{attrs:{id:"memorycache"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#memorycache"}},[e._v("#")]),e._v(" MemoryCache")]),e._v(" "),t("p",[e._v("精力有限，还是更新中..."),t("br"),e._v("\n如果你愿意帮忙，可以直接在GitHub中，提交pull request，"),t("br"),e._v("\n我会在后边的贡献者页面里，列出你的名字和项目地址做推广")]),e._v(" "),t("h2",{attrs:{id:"middleware"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#middleware"}},[e._v("#")]),e._v(" Middleware")]),e._v(" "),t("p",[e._v("精力有限，还是更新中..."),t("br"),e._v("\n如果你愿意帮忙，可以直接在GitHub中，提交pull request，"),t("br"),e._v("\n我会在后边的贡献者页面里，列出你的名字和项目地址做推广")]),e._v(" "),t("h2",{attrs:{id:"miniprofiler"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#miniprofiler"}},[e._v("#")]),e._v(" MiniProfiler")]),e._v(" "),t("p",[e._v("精力有限，还是更新中..."),t("br"),e._v("\n如果你愿意帮忙，可以直接在GitHub中，提交pull request，"),t("br"),e._v("\n我会在后边的贡献者页面里，列出你的名字和项目地址做推广")]),e._v(" "),t("h2",{attrs:{id:"publish"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#publish"}},[e._v("#")]),e._v(" publish")]),e._v(" "),t("p",[e._v("精力有限，还是更新中..."),t("br"),e._v("\n如果你愿意帮忙，可以直接在GitHub中，提交pull request，"),t("br"),e._v("\n我会在后边的贡献者页面里，列出你的名字和项目地址做推广")]),e._v(" "),t("h2",{attrs:{id:"redis"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[e._v("#")]),e._v(" Redis")]),e._v(" "),t("p",[e._v("精力有限，还是更新中..."),t("br"),e._v("\n如果你愿意帮忙，可以直接在GitHub中，提交pull request，"),t("br"),e._v("\n我会在后边的贡献者页面里，列出你的名字和项目地址做推广")]),e._v(" "),t("h2",{attrs:{id:"repository"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#repository"}},[e._v("#")]),e._v(" Repository")]),e._v(" "),t("p",[e._v("精力有限，还是更新中..."),t("br"),e._v("\n如果你愿意帮忙，可以直接在GitHub中，提交pull request，"),t("br"),e._v("\n我会在后边的贡献者页面里，列出你的名字和项目地址做推广")]),e._v(" "),t("h2",{attrs:{id:"seeddata"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#seeddata"}},[e._v("#")]),e._v(" SeedData")]),e._v(" "),t("p",[e._v("精力有限，还是更新中..."),t("br"),e._v("\n如果你愿意帮忙，可以直接在GitHub中，提交pull request，"),t("br"),e._v("\n我会在后边的贡献者页面里，列出你的名字和项目地址做推广")]),e._v(" "),t("h2",{attrs:{id:"signalr"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#signalr"}},[e._v("#")]),e._v(" SignalR")]),e._v(" "),t("p",[e._v("精力有限，还是更新中..."),t("br"),e._v("\n如果你愿意帮忙，可以直接在GitHub中，提交pull request，"),t("br"),e._v("\n我会在后边的贡献者页面里，列出你的名字和项目地址做推广")]),e._v(" "),t("h2",{attrs:{id:"sqlsugar"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sqlsugar"}},[e._v("#")]),e._v(" SqlSugar")]),e._v(" "),t("p",[e._v("精力有限，还是更新中..."),t("br"),e._v("\n如果你愿意帮忙，可以直接在GitHub中，提交pull request，"),t("br"),e._v("\n我会在后边的贡献者页面里，列出你的名字和项目地址做推广")]),e._v(" "),t("h2",{attrs:{id:"sqlsugar-codefirst-dataseed"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sqlsugar-codefirst-dataseed"}},[e._v("#")]),e._v(" SqlSugar-Codefirst&DataSeed")]),e._v(" "),t("p",[e._v("精力有限，还是更新中..."),t("br"),e._v("\n如果你愿意帮忙，可以直接在GitHub中，提交pull request，"),t("br"),e._v("\n我会在后边的贡献者页面里，列出你的名字和项目地址做推广")]),e._v(" "),t("h2",{attrs:{id:"sqlsugar-sqlaop"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#sqlsugar-sqlaop"}},[e._v("#")]),e._v(" SqlSugar-SqlAOP")]),e._v(" "),t("p",[e._v("精力有限，还是更新中..."),t("br"),e._v("\n如果你愿意帮忙，可以直接在GitHub中，提交pull request，"),t("br"),e._v("\n我会在后边的贡献者页面里，列出你的名字和项目地址做推广")]),e._v(" "),t("h2",{attrs:{id:"swagger"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#swagger"}},[e._v("#")]),e._v(" Swagger")]),e._v(" "),t("p",[e._v("精力有限，还是更新中..."),t("br"),e._v("\n如果你愿意帮忙，可以直接在GitHub中，提交pull request，"),t("br"),e._v("\n我会在后边的贡献者页面里，列出你的名字和项目地址做推广")]),e._v(" "),t("h2",{attrs:{id:"t4"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#t4"}},[e._v("#")]),e._v(" T4")]),e._v(" "),t("p",[e._v("项目集成 "),t("code",[e._v("T4")]),e._v(" 模板 "),t("code",[e._v(".\\Blog.Core.FrameWork")]),e._v(" 层，目的是可以一键生成项目模板代码。"),t("br"),e._v("\n1、需要在 "),t("code",[e._v("DbHelper.ttinclude")]),e._v(" 中配置连接数据库连接字符串；"),t("br"),e._v("\n2、针对每一层的代码，就去指定的 "),t("code",[e._v(".tt")]),e._v(" 模板，直接 "),t("code",[e._v("CTRL+S")]),e._v(" 保存即可；")]),e._v(" "),t("blockquote",[t("p",[e._v("注意，目前的代码是 "),t("code",[e._v("SqlServer")]),e._v(" 版本的，其他数据库版本的，可以去群文件查看。")])]),e._v(" "),t("h2",{attrs:{id:"test-xunit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#test-xunit"}},[e._v("#")]),e._v(" Test-xUnit")]),e._v(" "),t("p",[e._v("项目简单使用了单元测试，通过 "),t("code",[e._v("xUnit")]),e._v(" 组件，具体的可以查看 "),t("code",[e._v("Blog.Core.Tests")]),e._v(" 层相关代码。"),t("br"),e._v("\n目前单元测试用例还比较少，大家可以自行添加。")]),e._v(" "),t("h2",{attrs:{id:"temple-nuget"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#temple-nuget"}},[e._v("#")]),e._v(" Temple-Nuget")]),e._v(" "),t("p",[e._v("本项目封装了 "),t("code",[e._v("Nuget")]),e._v(" 自定义模板，你可以根据这个模板，一键创建自己的项目名，具体的操作，可以双击项目根目录下的 "),t("code",[e._v("CreateYourProject.bat")]),e._v(" ，可以参考 "),t("a",{attrs:{href:"http://apk.neters.club/.doc/guide/getting-started.html#%E5%A6%82%E4%BD%95%E9%A1%B9%E7%9B%AE%E9%87%8D%E5%91%BD%E5%90%8D",target:"_blank",rel:"noopener noreferrer"}},[e._v("#如何项目重命名"),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("同时，你也可以再 "),t("code",[e._v("Nuget")]),e._v(" 管理器中，搜索到：\n"),t("img",{attrs:{src:"http://apk.neters.club/images/20200507223058.png",alt:"nuget",width:"600"}})]),e._v(" "),t("h2",{attrs:{id:"userinfo"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#userinfo"}},[e._v("#")]),e._v(" UserInfo")]),e._v(" "),t("p",[e._v("项目中封装了获取用户信息的代码："),t("br"),e._v("\n在 "),t("code",[e._v(".\\Blog.Core.Common\\HttpContextUser")]),e._v(" 文件夹下 "),t("code",[e._v("AspNetUser.cs")]),e._v(" 实现类和 "),t("code",[e._v("IUser.cs")]),e._v(" 接口。")]),e._v(" "),t("p",[e._v("如果使用，首先需要注册相应的服务，参见："),t("code",[e._v(".\\Blog.Core\\Extensions")]),e._v(" 文件夹下的 "),t("code",[e._v("HttpContextSetup.cs")]),e._v("；"),t("br"),e._v("\n然后，就直接在控制器构造函数中，注入接口 "),t("code",[e._v("IUser")]),e._v(" 即可；")]),e._v(" "),t("blockquote",[t("p",[t("code",[e._v("注意")]),e._v("："),t("br"),e._v("\n1、如果要想获取指定的服务，必须登录，也就是必须要在 "),t("code",[e._v("Header")]),e._v(" 中传递有效 "),t("code",[e._v("Token")]),e._v(" ，这是肯定的。"),t("br"),e._v("\n2、如果要获取用户信息，一定要在中间件 "),t("code",[e._v("app.UseAuthentication()")]),e._v(" 之后（不要问为什么），控制器肯定在它之后，所以能获取到；"),t("br"),e._v("\n3、"),t("code",[e._v("【并不是】")]),e._v("一定需要添加 "),t("code",[e._v("[Authorize]")]),e._v(" 特性，如果你加了这个特性，可以直接获取，但是如果不加，可以从我的 "),t("code",[e._v("AspNetUser.cs")]),e._v(" 方法中，有一个直接从 "),t("code",[e._v("Header")]),e._v(" 中解析的方法 "),t("code",[e._v("List<string> GetUserInfoFromToken(string ClaimType);")]),e._v("：")])]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(' public string GetToken()\n {\n     return _accessor.HttpContext.Request.Headers["Authorization"].ObjToString().Replace("Bearer ", "");\n }\n\n public List<string> GetUserInfoFromToken(string ClaimType)\n {\n\n     var jwtHandler = new JwtSecurityTokenHandler();\n     if (!string.IsNullOrEmpty(GetToken()))\n     {\n         JwtSecurityToken jwtToken = jwtHandler.ReadJwtToken(GetToken());\n\n         return (from item in jwtToken.Claims\n                 where item.Type == ClaimType\n                 select item.Value).ToList();\n     }\n     else\n     {\n         return new List<string>() { };\n     }\n }\n\n')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);